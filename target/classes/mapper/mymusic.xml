<?xml version="1.0" encoding="UTF-8"?>

<!-- DTD(Document Type Definition)
	 - 작성한 문서가 어떤문서인지에 대해서 정의하는 것 
	 - 하나의 시스템 내에서 사용할 XML 데엍의 구조를 정의하여 유효성을 점검시 사용함 -->

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="MyMusicDAO">
	<select id="select_playlist" parameterType="int" resultType="PlaylistDTO">
		select distinct playlist_no, playlist_name, playlist_thumbnail, last_value(m_order) over(order by playlist_no) as m_order
		from music_playlist
		where user_no = #{user_no} order by playlist_no
	</select>
	
	<select id="count_playlist" parameterType="int" resultType="int">
		select max(playlist_no) from music_playlist where user_no = #{user_no}
	</select>
	
	<select id="select_like" parameterType="PageDTO" resultType="MusicDTO">
		<![CDATA[
			select * from
				(select m.*, row_number() over(order by m_no desc) rnum
				from music m where m_no in
					(select m_no from music_by_user where user_no = #{user_no} and play_thumbs = 'true'))
			where rnum >= #{startNo} and rnum <= #{endNo}
		]]>
	</select>
	
	<select id="recent_watch" parameterType="PageDTO" resultType="MusicDTO">
		<![CDATA[
			select * from
				(select m.*, u.play_date, row_number() over(order by u.play_date desc, m.m_no) rnum from music m, music_by_user u where m.m_no in
					(select u.m_no from music_by_user where user_no = #{user_no}) and user_no = #{user_no})
			where rnum >= #{startNo} and rnum <= #{endNo}
		]]>
	</select>
	
	<select id="much_watch" parameterType="PageDTO" resultType="MusicDTO">
		<![CDATA[
			select * from
				(select m.*, u.play_counts, row_number() over(order by u.play_counts desc, m.m_no) rnum from music m, music_by_user u where m.m_no in
					(select u.m_no from music_by_user where user_no = #{user_no}) and user_no = #{user_no})
			where rnum >= #{startNo} and rnum <= #{endNo}
		]]>
	</select>
	
	<update id="like" parameterType="MyMusicDTO">
		<![CDATA[
			update music_by_user set play_thumbs = case
				when play_thumbs = 'true' then 'false'
				when play_thumbs = 'false' then 'true'
			end
			where user_no = #{user_no} and m_no = #{m_no}
		]]>
	</update>

	<update id="watch_history" parameterType="MyMusicDTO">
		update music_by_user set play_date = sysdate, play_counts = play_counts + 1 where user_no = #{user_no} and m_no = #{music_no}
	</update>
	
	<insert id="first_watch" parameterType="MyMusicDTO">
		<![CDATA[
			insert into music_by_user
			select #{user_no}, #{music_no}, sysdate, 'false', 0 from dual where not exists
			(select * from music_by_user where user_no = #{user_no} and m_no = #{music_no})
		]]>
	</insert>
	
	<select id="see_playlist" resultType="PlaylistDTO">
		<![CDATA[
			select distinct playlist_no, playlist_name, playlist_thumbnail, user_no,
			case when playlist_no not in (select playlist_no from music_playlist where m_no = #{m_no} and user_no = #{user_no}) then 1 else 0 end as m_order
			from music_playlist
			where user_no = #{user_no}
			order by playlist_no
		]]>
	</select>
	
 	<insert id="to_playlist" parameterType="PlaylistDTO">
		<selectKey resultType="int" keyProperty="m_order" order="BEFORE">
			select count(*) from music_playlist where user_no = #{user_no} and playlist_no = #{playlist_no} and m_order > 0
		</selectKey>
		insert into music_playlist values (#{user_no}, #{m_no}, #{m_order}+1, #{playlist_no}, #{playlist_name}, #{playlist_thumbnail})
	</insert>
	
	<insert id="insert_playlist" parameterType="PlaylistDTO">
		<selectKey resultType="int" keyProperty="playlist_no" order="BEFORE">
			select count(distinct playlist_no) + 1 from music_playlist where user_no = #{user_no}
		</selectKey>
		insert into music_playlist values(#{user_no}, 0, 0, #{playlist_no}, #{playlist_name}, '')
	</insert>
	
	<update id="update_playlist" parameterType="PlaylistDTO">
		update music_playlist set playlist_name = #{playlist_name} where user_no = #{user_no} and playlist_no = #{playlist_no}
	</update>
	
	<delete id="delete_playlist" parameterType="PlaylistDTO">
		delete from music_playlist where user_no = #{user_no} and playlist_no = #{playlist_no}
	</delete>
	
	<update id="update_p_seq" parameterType="PlaylistDTO">
		update music_playlist set playlist_no = playlist_no - 1 where playlist_no > #{playlist_no} and user_no = #{user_no}
	</update>
	
	<update id="image_register" parameterType="PlaylistDTO">
		update music_playlist set playlist_thumbnail = #{playlist_thumbnail} where user_no = #{user_no} and playlist_no = #{playlist_no}
	</update>
	
	<select id="get_musiclist" parameterType="PlaylistDTO" resultType="MusicDTO">
		select m.* from music m, music_playlist p where m.m_no = p.m_no and user_no = #{user_no} and playlist_no = #{playlist_no} order by p.m_order
	</select>
	
	<select id="get_playlist_name" parameterType="PlaylistDTO" resultType="String">
		select distinct playlist_name from music_playlist where user_no = #{user_no} and playlist_no = #{playlist_no}
	</select>
	
	<update id="order_musiclist" parameterType="PlaylistDTO">
		update music_playlist set m_order = case
			when m_order = #{m_order} then m_order + 1
			when m_order = #{m_order} + 1 then m_order - 1
			else m_order end
		where user_no = #{user_no} and playlist_no = #{playlist_no}
	</update>
	
	<delete id="delete_musiclist" parameterType="PlaylistDTO">
		delete from music_playlist where m_order = #{m_order} and user_no = #{user_no} and playlist_no = #{playlist_no}
	</delete>
	
	<update id="update_m_seq" parameterType="PlaylistDTO">
		update music_playlist set m_order = m_order - 1 where m_order > #{m_order} and user_no = #{user_no} and playlist_no = #{playlist_no}
	</update>
	
	<select id="my_info" parameterType="MyMusicDTO" resultType="MyMusicDTO">
		select * from music_by_user where user_no = #{user_no} and m_no = #{m_no}
	</select>
</mapper>
